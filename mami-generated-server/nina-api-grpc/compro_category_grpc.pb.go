// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: nina-api-grpc/compro_category.proto

package nina_api_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComproCategoryServiceClient is the client API for ComproCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComproCategoryServiceClient interface {
	CategoryGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CategoryGetResponse, error)
	CategoryPost(ctx context.Context, in *CategoryPostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TopicGet(ctx context.Context, in *TopicGetRequest, opts ...grpc.CallOption) (*TopicGetResponse, error)
}

type comproCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComproCategoryServiceClient(cc grpc.ClientConnInterface) ComproCategoryServiceClient {
	return &comproCategoryServiceClient{cc}
}

func (c *comproCategoryServiceClient) CategoryGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CategoryGetResponse, error) {
	out := new(CategoryGetResponse)
	err := c.cc.Invoke(ctx, "/nina.ComproCategoryService/CategoryGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comproCategoryServiceClient) CategoryPost(ctx context.Context, in *CategoryPostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nina.ComproCategoryService/CategoryPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comproCategoryServiceClient) TopicGet(ctx context.Context, in *TopicGetRequest, opts ...grpc.CallOption) (*TopicGetResponse, error) {
	out := new(TopicGetResponse)
	err := c.cc.Invoke(ctx, "/nina.ComproCategoryService/TopicGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComproCategoryServiceServer is the server API for ComproCategoryService service.
// All implementations must embed UnimplementedComproCategoryServiceServer
// for forward compatibility
type ComproCategoryServiceServer interface {
	CategoryGet(context.Context, *emptypb.Empty) (*CategoryGetResponse, error)
	CategoryPost(context.Context, *CategoryPostRequest) (*emptypb.Empty, error)
	TopicGet(context.Context, *TopicGetRequest) (*TopicGetResponse, error)
	mustEmbedUnimplementedComproCategoryServiceServer()
}

// UnimplementedComproCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedComproCategoryServiceServer struct {
}

func (UnimplementedComproCategoryServiceServer) CategoryGet(context.Context, *emptypb.Empty) (*CategoryGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryGet not implemented")
}
func (UnimplementedComproCategoryServiceServer) CategoryPost(context.Context, *CategoryPostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryPost not implemented")
}
func (UnimplementedComproCategoryServiceServer) TopicGet(context.Context, *TopicGetRequest) (*TopicGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopicGet not implemented")
}
func (UnimplementedComproCategoryServiceServer) mustEmbedUnimplementedComproCategoryServiceServer() {}

// UnsafeComproCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComproCategoryServiceServer will
// result in compilation errors.
type UnsafeComproCategoryServiceServer interface {
	mustEmbedUnimplementedComproCategoryServiceServer()
}

func RegisterComproCategoryServiceServer(s grpc.ServiceRegistrar, srv ComproCategoryServiceServer) {
	s.RegisterService(&ComproCategoryService_ServiceDesc, srv)
}

func _ComproCategoryService_CategoryGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComproCategoryServiceServer).CategoryGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nina.ComproCategoryService/CategoryGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComproCategoryServiceServer).CategoryGet(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComproCategoryService_CategoryPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComproCategoryServiceServer).CategoryPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nina.ComproCategoryService/CategoryPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComproCategoryServiceServer).CategoryPost(ctx, req.(*CategoryPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComproCategoryService_TopicGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComproCategoryServiceServer).TopicGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nina.ComproCategoryService/TopicGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComproCategoryServiceServer).TopicGet(ctx, req.(*TopicGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComproCategoryService_ServiceDesc is the grpc.ServiceDesc for ComproCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComproCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nina.ComproCategoryService",
	HandlerType: (*ComproCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CategoryGet",
			Handler:    _ComproCategoryService_CategoryGet_Handler,
		},
		{
			MethodName: "CategoryPost",
			Handler:    _ComproCategoryService_CategoryPost_Handler,
		},
		{
			MethodName: "TopicGet",
			Handler:    _ComproCategoryService_TopicGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nina-api-grpc/compro_category.proto",
}
